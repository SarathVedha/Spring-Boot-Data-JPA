package com.vedha.entity;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.SuperBuilder;
import org.hibernate.proxy.HibernateProxy;

import java.util.Objects;
import java.util.Set;

@Getter
@Setter
@ToString
@SuperBuilder
@RequiredArgsConstructor
@AllArgsConstructor
@Entity
@Table(
        name = "course"
)
public class CourseEntity extends BaseEntity {

    // SEQUENCE is used to generate a unique primary key for the entity, it is used when the primary key is generated by a database sequence,
    // it is supported by Oracle, PostgresSQL, DB2, and some other databases
    @Id
    @GeneratedValue(
            generator = "course_id_seq",
            strategy = GenerationType.SEQUENCE
    )
    @SequenceGenerators(
            @SequenceGenerator(
                    name = "course_id_seq",
                    sequenceName = "course_id_seq",
                    allocationSize = 1
            )
    )
    @Column(
            name = "course_id"
    )
    private Long id;

    @Column(
            name = "course_title",
            nullable = false
    )
    private String title;

    @Column(
            name = "course_description"
    )
    private String description;

    @JsonBackReference
    @ToString.Exclude
    @ManyToMany(
            fetch = FetchType.LAZY
    )
    @JoinTable(
            name = "authors_courses",
            joinColumns = {
                    @JoinColumn(
                            name = "course_id",
                            referencedColumnName = "course_id" // used @Column(name = "course_id") in CourseEntity
                    )
            },
            inverseJoinColumns = {
                    @JoinColumn(
                            name = "author_id",
                            referencedColumnName = "id" // used @Id in AuthorEntity
                    )
            }
    )
    private Set<AuthorEntity> authors;

    @JsonManagedReference
    @ToString.Exclude
    @OneToMany(
            mappedBy = "course",
            fetch = FetchType.LAZY
    )
    private Set<SectionEntity> sections;

    @Override
    public final boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        Class<?> oEffectiveClass = o instanceof HibernateProxy ? ((HibernateProxy) o).getHibernateLazyInitializer().getPersistentClass() : o.getClass();
        Class<?> thisEffectiveClass = this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass() : this.getClass();
        if (thisEffectiveClass != oEffectiveClass) return false;
        CourseEntity that = (CourseEntity) o;
        return getId() != null && Objects.equals(getId(), that.getId());
    }

    @Override
    public final int hashCode() {
        return this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass().hashCode() : getClass().hashCode();
    }
}
